name: CI/CD Pipeline for Bread Defect Detection

on:
  push:
    branches:
      - master  # Trigger the pipeline on changes to the master branch

jobs:
  # Continuous Integration
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python environment and dependencies
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # Use the version that matches your project

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

  # Continuous Delivery
  push_to_ecr:
    runs-on: ubuntu-latest
    needs: build  # Ensures this job only runs after the build job succeeds
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up AWS CLI
      - name: Set up AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ap-south-1  # Replace with your region

      # Step 3: Log in to AWS ECR
      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 340752842142.dkr.ecr.us-east-2.amazonaws.com

      # Step 4: Build and push Docker image to AWS ECR
      - name: Build and Push Docker image
        run: |
          docker build -t pharm .
          docker tag pharm:latest 340752842142.dkr.ecr.us-east-2.amazonaws.com/pharm:latest
          docker push 340752842142.dkr.ecr.us-east-2.amazonaws.com/pharm:latest

  # Continuous Deployment
  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: push_to_ecr  # This job will only run after the image is pushed to ECR
    
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up SSH agent to use the private key for EC2 access
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}  # Replace with your private key stored in GitHub Secrets

      # Step 3: Configure AWS CLI
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-2  # Replace with your region

      # Step 4: Deploy to EC2 instance
      - name: Deploy to EC2 instance
        run: |
          # Connect to EC2 and perform deployment
          ssh -o StrictHostKeyChecking=no ubuntu@3.133.158.114 << 'EOF'
            # Install AWS CLI if missing
            if ! command -v aws &> /dev/null; then
              echo "Installing AWS CLI..."
              sudo apt update
              sudo apt install -y awscli
            fi

            # Authenticate Docker with ECR
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 340752842142.dkr.ecr.us-east-2.amazonaws.com

            # Stop existing container if running
            CONTAINER_ID=$(docker ps -q -f "ancestor=340752842142.dkr.ecr.us-east-2.amazonaws.com/pharm:latest")
            if [ ! -z "$CONTAINER_ID" ]; then
              echo "Stopping existing container..."
              docker stop $CONTAINER_ID || true
              docker rm $CONTAINER_ID || true
            fi

            # Pull and run the latest image
            echo "Pulling latest image..."
            docker pull 340752842142.dkr.ecr.us-east-2.amazonaws.com/pharm:latest

            echo "Running the new container..."
            docker run -d -p 8080:8080 340752842142.dkr.ecr.us-east-2.amazonaws.com/pharm:latest
          EOF

      # Optional: Check the running container logs (for debugging purposes)
      - name: Check Docker container logs
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@3.133.158.114 << 'EOF'
            echo "Listing running containers..."
            docker ps
          EOF
